# .github/workflows/sync.yml - REEMPLAZAR ARCHIVO COMPLETO
name: Daily Strava Sync & Backup

on:
  schedule:
    - cron: '0 6 * * *'  # 6:00 AM UTC diariamente
  workflow_dispatch:     # Permitir ejecuci√≥n manual

jobs:
  sync-and-backup:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Trigger sync
        id: sync
        run: |
          echo "üöÄ Starting Strava data sync..."
          
          # Hacer request al webhook
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SYNC_TOKEN }}" \
            -d '{"days": 7}' \
            "${{ secrets.RAILWAY_SYNC_WEBHOOK }}")
          
          # Extraer c√≥digo HTTP y respuesta
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')
          
          echo "Response code: $http_code"
          echo "Response body: $body"
          
          # Verificar √©xito
          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Sync triggered successfully"
            echo "sync_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Sync failed with HTTP $http_code"
            echo "sync_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Wait for sync to complete
        if: steps.sync.outputs.sync_status == 'success'
        run: |
          echo "‚è≥ Waiting 90 seconds for sync to complete..."
          sleep 90

      - name: Create backup directory
        run: |
          mkdir -p backups
          echo "üìÅ Backup directory created"

      - name: Download activities backup
        id: backup_activities
        run: |
          echo "üìä Downloading activities CSV..."
          
          # Descargar CSV de actividades
          response_code=$(curl -s -w "%{http_code}" \
            -o "backups/strava_activities_$(date +%Y%m%d).csv" \
            "${{ secrets.RAILWAY_APP_URL }}/export/csv/activities")
          
          if [ $response_code -eq 200 ]; then
            file_size=$(du -h "backups/strava_activities_$(date +%Y%m%d).csv" | cut -f1)
            echo "‚úÖ Activities CSV downloaded ($file_size)"
            echo "activities_backup=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to download activities CSV (HTTP: $response_code)"
            echo "activities_backup=failed" >> $GITHUB_OUTPUT
          fi

      - name: Download athletes backup
        id: backup_athletes
        run: |
          echo "üë• Downloading athletes CSV..."
          
          # Descargar CSV de atletas
          response_code=$(curl -s -w "%{http_code}" \
            -o "backups/strava_athletes_$(date +%Y%m%d).csv" \
            "${{ secrets.RAILWAY_APP_URL }}/export/csv/athletes")
          
          if [ $response_code -eq 200 ]; then
            file_size=$(du -h "backups/strava_athletes_$(date +%Y%m%d).csv" | cut -f1)
            echo "‚úÖ Athletes CSV downloaded ($file_size)"
            echo "athletes_backup=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to download athletes CSV (HTTP: $response_code)"
            echo "athletes_backup=failed" >> $GITHUB_OUTPUT
          fi

      - name: Download full backup (weekly)
        if: github.event.schedule == '0 6 * * 0' || github.event_name == 'workflow_dispatch'
        run: |
          echo "üì¶ Downloading full backup (weekly)..."
          
          response_code=$(curl -s -w "%{http_code}" \
            -o "backups/strava_full_backup_$(date +%Y%m%d).zip" \
            "${{ secrets.RAILWAY_APP_URL }}/export/backup")
          
          if [ $response_code -eq 200 ]; then
            file_size=$(du -h "backups/strava_full_backup_$(date +%Y%m%d).zip" | cut -f1)
            echo "‚úÖ Full backup downloaded ($file_size)"
          else
            echo "‚ùå Failed to download full backup (HTTP: $response_code)"
          fi

      - name: Verify backups
        run: |
          echo "üîç Verifying downloaded backups..."
          
          ls -la backups/
          
          # Verificar que los archivos no est√©n vac√≠os
          for file in backups/*.csv; do
            if [ -f "$file" ] && [ -s "$file" ]; then
              lines=$(wc -l < "$file")
              echo "‚úÖ $(basename "$file"): $lines lines"
            else
              echo "‚ùå $(basename "$file"): empty or missing"
            fi
          done

      - name: Commit and push backups
        run: |
          # Configurar git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Agregar archivos de backup
          git add backups/
          
          # Hacer commit si hay cambios
          if git diff --staged --quiet; then
            echo "üìù No new backup files to commit"
          else
            git commit -m "üîÑ Daily backup: $(date +%Y-%m-%d)"
            git push
            echo "‚úÖ Backups committed and pushed to repository"
          fi

      - name: Clean old backups
        run: |
          echo "üßπ Cleaning old backup files..."
          
          # Mantener solo los √∫ltimos 30 d√≠as de CSVs
          find backups/ -name "*.csv" -type f -mtime +30 -delete
          
          # Mantener solo los √∫ltimos 12 backups completos (3 meses)
          find backups/ -name "*full_backup*.zip" -type f | sort | head -n -12 | xargs -r rm
          
          echo "‚úÖ Cleanup completed"

      - name: Health check
        run: |
          echo "üîç Final health check..."
          health=$(curl -s "${{ secrets.RAILWAY_APP_URL }}/health" || echo "ERROR")
          
          echo "Health check result: $health"
          
          if echo "$health" | grep -q '"status":"ok"'; then
            echo "‚úÖ System is healthy after sync & backup"
          else
            echo "‚ö†Ô∏è System health check inconclusive"
          fi

      - name: Report summary
        if: always()
        run: |
          echo "üìã DAILY SYNC & BACKUP SUMMARY"
          echo "=============================="
          echo "Date: $(date)"
          echo "Sync status: ${{ steps.sync.outputs.sync_status }}"
          echo "Activities backup: ${{ steps.backup_activities.outputs.activities_backup }}"
          echo "Athletes backup: ${{ steps.backup_athletes.outputs.athletes_backup }}"
          
          if [ "${{ steps.sync.outputs.sync_status }}" = "success" ]; then
            echo "üéâ Daily sync & backup completed successfully!"
          else
            echo "üí• Some operations failed - check logs above"
          fi
          
          echo "Next sync: Tomorrow at 6:00 AM UTC"
          echo "=============================="